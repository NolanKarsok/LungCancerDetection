#Data Preprocessing Packages
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split,cross_val_score
import graphviz
from imblearn.over_sampling import RandomOverSampler
from sklearn.feature_selection import SelectKBest,chi2

#Model Building Packages
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.model_selection import GridSearchCV
from sklearn.tree import DecisionTreeClassifier, export_graphviz
from sklearn.svm import SVC

#Model Evaluation Packages
from sklearn.metrics import r2_score, mean_squared_error
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score, recall_score

import warnings
warnings.filterwarnings('ignore')

# Load the dataset
df = pd.read_csv('C:/Users/nkars/OneDrive/Documents/Machine Learning/Course Project/survey lung cancer.csv')

for categorical_column in df:
    if categorical_column == 'AGE': # Skip the 'AGE' column as it is continuous numerical attribute
        continue
    df[categorical_column]=LabelEncoder().fit_transform(df[categorical_column])
    
X = df[["AGE", "ALCOHOL CONSUMING", "CHEST PAIN"]]
y = df['LUNG_CANCER'] # Target variable

# Split the dataset into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# resample minority class in both test and train
# We do this after the split so that duplicates don't pollute either set
X_train, y_train = RandomOverSampler().fit_resample(X_train, y_train)
X_test, y_test = RandomOverSampler().fit_resample(X_test, y_test)

# Choose the features to be used in the model
features = ['AGE', 'ALCOHOL CONSUMING', 'CHEST PAIN']

# Train the model on the entire dataset
model = RandomForestClassifier(n_estimators=100)

model.fit(X_train, y_train)

# Define a function to ask the questions and get the responses
def ask_questions():
    # Ask the questions and get the responses here
    answers = []
    print("Answer the following questions. Age is numerical and the remaining are binary (0 = No, 1 = Yes)")
    for feature in features:
        answer = input(f"{feature}: ")
        answers.append(answer)
    return np.array(answers).reshape(1, -1)

# Use the predict_proba function to get the probability of being labeled as 1
answers = ask_questions()
probabilities = model.predict_proba(answers)[:,1]
print(f"Probability of being labeled as 1: {probabilities[0]:.2f}")
